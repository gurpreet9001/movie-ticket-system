/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ticketbooking;

import java.awt.print.PrinterException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author gurpreet9001
 */
public class all_tickets extends javax.swing.JInternalFrame implements myvariables {

    /**
     * Creates new form all_tickets
     */
    public all_tickets() {
        initComponents();
        
                try
 {
 Connection myconnection1;
 myconnection1=DriverManager.getConnection(PATH+PLACE, USERNAME, PASS);
 
 try
 {
    String myquery1="select audi from hall_list";
    PreparedStatement mystatement1=myconnection1.prepareStatement(myquery1);
    ResultSet myresult1=mystatement1.executeQuery();
    
    if(myresult1.next()){
    do{
    audibox.addItem(myresult1.getString("audi"));
    }while(myresult1.next());
    }
  
    audibox.setSelectedIndex(0);
   
 
 }
 catch(Exception e)
 {
    JOptionPane.showMessageDialog(rootPane, "Error in Query 1 " + e.getMessage());
 }
 finally
 {
    myconnection1.close();
 }
 }
 catch(Exception e)
 {
 JOptionPane.showMessageDialog(rootPane, "Error in Connection " + e.getMessage());
 }
        
        
   try
 {
 Connection myconnection;
 myconnection=DriverManager.getConnection(PATH+PLACE, USERNAME, PASS);
 
 try
 {
    String myquery="select * from ticket_booked";
    PreparedStatement mystatement=myconnection.prepareStatement(myquery);
    ResultSet myresult=mystatement.executeQuery();
    
    if(myresult.next()){
      DefaultTableModel mymodel=(DefaultTableModel) jTable1.getModel();
        String audi,movie,luxury,price,tickets,id,total,bookdate,showtime,showdate;
        do{
    audi=myresult.getString("audi");
    movie=myresult.getString("movie");
    luxury=myresult.getString("luxury");
    price=myresult.getString("price");
    tickets=myresult.getString("tickets");
    id=myresult.getString("id");
    total=myresult.getString("total");
    bookdate=myresult.getString("bookdate");
    showdate=myresult.getString("showdate");
    showtime=myresult.getString("showtime");
    
    mymodel.addRow(new Object[]{audi,movie,luxury,price,tickets,id,total,bookdate,showtime,showdate});
    }while(myresult.next());
    
    }
    
 
 }
 catch(Exception e)
 {
    JOptionPane.showMessageDialog(rootPane, "Error in Query 3 " + e.getMessage());
 }
 finally
 {
    myconnection.close();
 }
 }
 catch(Exception e)
 {
 JOptionPane.showMessageDialog(rootPane, "Error in Connection " + e.getMessage());
 }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        audibox = new javax.swing.JComboBox<>();
        showtimebox = new javax.swing.JComboBox<>();
        databutton = new javax.swing.JButton();
        databutton1 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Ticket List");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Audi", "Movie", "Luxury", "Price ", "Id", "Tickets", "Total", "Book Date", "Show Time", "Show Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        audibox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose Audi" }));
        audibox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                audiboxActionPerformed(evt);
            }
        });

        showtimebox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose Showtime", "6 AM", "9 AM", "1 PM", "4 PM", "7 PM", "11 PM" }));
        showtimebox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showtimeboxActionPerformed(evt);
            }
        });

        databutton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ticketbooking/search.png"))); // NOI18N
        databutton.setText("Get Data");
        databutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databuttonActionPerformed(evt);
            }
        });

        databutton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ticketbooking/printer.png"))); // NOI18N
        databutton1.setText("Print");
        databutton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databutton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1060, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 878, Short.MAX_VALUE)
                .addComponent(databutton1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(audibox, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(showtimebox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83)
                .addComponent(databutton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(databutton)
                    .addComponent(showtimebox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(audibox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 53, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(databutton1)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void databuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databuttonActionPerformed
  DefaultTableModel model = (DefaultTableModel)this.jTable1.getModel();
model.setRowCount(0);
        try
 {
 Connection myconnection;
 myconnection=DriverManager.getConnection(PATH+PLACE, USERNAME, PASS);
 
 try
 {
    
    String myquery="select * from ticket_booked where audi=? and showtime=?";
     PreparedStatement mystatement=myconnection.prepareStatement(myquery);
                mystatement.setString(2, showtimebox.getSelectedItem().toString());
                mystatement.setString(1, audibox.getSelectedItem().toString());
                
         ResultSet myresult=mystatement.executeQuery();
                
          
     if(myresult.next()){
      DefaultTableModel mymodel=(DefaultTableModel) jTable1.getModel();
        String audi,movie,luxury,price,tickets,id,total,bookdate,showtime,showdate;
        do{
    audi=myresult.getString("audi");
    movie=myresult.getString("movie");
    luxury=myresult.getString("luxury");
    price=myresult.getString("price");
    tickets=myresult.getString("tickets");
    id=myresult.getString("id");
    total=myresult.getString("total");
    bookdate=myresult.getString("bookdate");
    showdate=myresult.getString("showdate");
    showtime=myresult.getString("showtime");
    
    mymodel.addRow(new Object[]{audi,movie,luxury,price,tickets,id,total,bookdate,showtime,showdate});
    }while(myresult.next());
    
    }
    
      
                    showtimebox.setSelectedIndex(0);
                    audibox.setSelectedIndex(0);
    
 
 }
 catch(Exception e)
 {
    JOptionPane.showMessageDialog(rootPane, "Error in Query 2 " + e.getMessage());
 }
 finally
 {
    myconnection.close();
 }
 }
 catch(Exception e)
 {
 JOptionPane.showMessageDialog(rootPane, "Error in Connection " + e.getMessage());
 }
    }//GEN-LAST:event_databuttonActionPerformed

    private void showtimeboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showtimeboxActionPerformed

    }//GEN-LAST:event_showtimeboxActionPerformed

    private void audiboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_audiboxActionPerformed
                       try
 {
 Connection myconnection;
 myconnection=DriverManager.getConnection(PATH+PLACE, USERNAME, PASS);
 
 try
 {
    String myquery="select distinct(theater) from ticket_booked where city=?";
    PreparedStatement mystatement=myconnection.prepareStatement(myquery);
    mystatement.setString(1,audibox.getSelectedItem().toString());
    ResultSet myresult=mystatement.executeQuery();
    
    
    
    
    
    if(myresult.next()){
        showtimebox.removeAllItems();
        showtimebox.addItem("Choose theater now");
    do{
    showtimebox.addItem(myresult.getString("theater"));
    }while(myresult.next());
    
    }
           
    showtimebox.setSelectedIndex(0);
    
 
 }
 catch(Exception e)
 {
    //JOptionPane.showMessageDialog(rootPane, "Error in Query 2 " + e.getMessage());
 }
 finally
 {
    myconnection.close();
 }
 }
 catch(Exception e)
 {
 JOptionPane.showMessageDialog(rootPane, "Error in Connection " + e.getMessage());
 }
    }//GEN-LAST:event_audiboxActionPerformed

    private void databutton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databutton1ActionPerformed
        MessageFormat headerFormat = new MessageFormat("Booked Tickets");
        MessageFormat footerFormat = new MessageFormat("Page {0}");
        try {
            jTable1.print(JTable.PrintMode.FIT_WIDTH, headerFormat, footerFormat);
        } catch (PrinterException ex) {
            Logger.getLogger(all_tickets.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_databutton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> audibox;
    private javax.swing.JButton databutton;
    private javax.swing.JButton databutton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox<String> showtimebox;
    // End of variables declaration//GEN-END:variables
}
